package main

import (
	"absence/internal"
	"absence/pkg/database"
	"absence/pkg/jwt"
	"log"
	"os"
	"time"

	_ "absence/docs" // This will be generated by swag

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title           Absence API
// @version         1.0
// @description     A simple absence management API
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	// Load environment variables
	if err := godotenv.Load(); err != nil {
		log.Fatal("Error loading .env file")
	}

	// Initialize database
	dbConfig := &database.Config{
		Host:     os.Getenv("DB_HOST"),
		Port:     os.Getenv("DB_PORT"),
		User:     os.Getenv("DB_USER"),
		Password: os.Getenv("DB_PASSWORD"),
		DBName:   os.Getenv("DB_NAME"),
	}

	db, err := internal.InitializeDB(dbConfig)
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	// Auto migrate database
	if err := database.AutoMigrate(db); err != nil {
		log.Fatal("Failed to migrate database:", err)
	}

	// Initialize JWT manager
	secretKey := os.Getenv("JWT_SECRET_KEY")
	if secretKey == "" {
		secretKey = "your-secret-key" // Default secret key for development
	}
	tokenDuration := 24 * time.Hour // Token expires in 24 hours
	jwtManager := jwt.NewJWTManager(secretKey, tokenDuration)

	// Initialize API using wire
	api, err := internal.InitializeAPI(db, jwtManager)
	if err != nil {
		log.Fatal("Failed to initialize API:", err)
	}

	// Setup router
	router := gin.Default()

	// Swagger documentation
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Public routes
	router.POST("/api/register", api.UserHandler.Register)
	router.POST("/api/login", api.UserHandler.Login)

	// Protected routes
	apiGroup := router.Group("/api")
	apiGroup.Use(api.AuthMiddleware.AuthMiddleware())
	{
		// User routes
		users := apiGroup.Group("/users")
		{
			users.GET("/:id", api.UserHandler.GetUser)
			users.PUT("/:id", api.UserHandler.UpdateUser)
			users.DELETE("/:id", api.UserHandler.DeleteUser)
			users.GET("/:id/attendance", api.AttendanceHandler.GetUserAttendances)
		}

		// Attendance routes
		attendance := apiGroup.Group("/attendance")
		{
			attendance.POST("/check-in", api.AttendanceHandler.CheckIn)
			attendance.POST("/check-out", api.AttendanceHandler.CheckOut)
			attendance.GET("/:id", api.AttendanceHandler.GetAttendance)
		}
	}

	// Start server
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("Server starting on port %s...", port)
	if err := router.Run(":" + port); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}
