basePath: /api
definitions:
  model.Attendance:
    properties:
      check_in:
        type: string
      check_out:
        type: string
      created_at:
        type: string
      id:
        type: integer
      location_in:
        type: string
      location_out:
        type: string
      notes:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.User:
    description: User model
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  request.LoginRequest:
    description: Login request
    properties:
      password:
        example: secure123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  request.RegisterRequest:
    description: User registration request
    properties:
      email:
        example: john@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      password:
        example: secure123
        type: string
      role:
        enum:
        - admin
        - employee
        example: employee
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - full_name
    - password
    - role
    - username
    type: object
  request.UpdateUserRequest:
    description: User update request
    properties:
      email:
        example: john.updated@example.com
        type: string
      full_name:
        example: John Doe Updated
        type: string
      role:
        enum:
        - admin
        - employee
        example: employee
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - full_name
    - role
    - username
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A attendance management system API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Absence API
  version: "1.0"
paths:
  /attendance/{id}:
    get:
      consumes:
      - application/json
      description: Get attendance record by ID
      parameters:
      - description: Attendance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attendance record
          schema:
            $ref: '#/definitions/model.Attendance'
        "400":
          description: Invalid attendance ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Attendance record not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get attendance record
      tags:
      - attendance
  /attendance/check-in:
    post:
      consumes:
      - application/json
      description: Record user's check-in time and location
      parameters:
      - description: Check-in location
        in: body
        name: location
        required: true
        schema:
          properties:
            location:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Check-in successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or already checked in
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Record attendance check-in
      tags:
      - attendance
  /attendance/check-out:
    post:
      consumes:
      - application/json
      description: Record user's check-out time and location
      parameters:
      - description: Check-out location
        in: body
        name: location
        required: true
        schema:
          properties:
            location:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Check-out successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or no check-in record
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Record attendance check-out
      tags:
      - attendance
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return token
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{user_id}/attendance:
    get:
      consumes:
      - application/json
      description: Get user's attendance records within a date range
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of attendance records
          schema:
            items:
              $ref: '#/definitions/model.Attendance'
            type: array
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user's attendance records
      tags:
      - attendance
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
